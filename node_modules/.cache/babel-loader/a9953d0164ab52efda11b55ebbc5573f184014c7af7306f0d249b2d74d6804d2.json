{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Awaab Abdelbagi\\\\Desktop\\\\Satr\\\\React.js\\\\ReactPyPackege\\\\first-project\\\\src\\\\Components\\\\Text.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Text() {\n  const client = \"Programming\";\n  let text = `Programming and design are skills for creating software applications with code, structure, logic, and appearance using various tools and methods`;\n  if (client === \"Programming\") {\n    text = text.split(\" \").map(ele => ele === client ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"ele.toLocaleUpperCase()\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 62\n    }, this) : ele).join(\" \");\n  } else if (client === \"design\") {\n    text = text.split(\" \").map(ele => ele === client ? ele.toLocaleUpperCase() : ele).join(\" \");\n  }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"mt-3 px-2\",\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = Text;\n;\nexport default Text;\nvar _c;\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Text","client","text","split","map","ele","children","fileName","_jsxFileName","lineNumber","columnNumber","join","toLocaleUpperCase","className","_c","$RefreshReg$"],"sources":["C:/Users/Awaab Abdelbagi/Desktop/Satr/React.js/ReactPyPackege/first-project/src/Components/Text.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction Text() {\r\n    const client = \"Programming\";\r\n    let text = `Programming and design are skills for creating software applications with code, structure, logic, and appearance using various tools and methods`\r\n\r\n    if (client === \"Programming\") {\r\n        text = text.split(\" \").map((ele) => ele === client ? <span>ele.toLocaleUpperCase()</span> : ele).join(\" \");\r\n    } else if (client === \"design\") {\r\n        text = text.split(\" \").map((ele) => ele === client ? ele.toLocaleUpperCase() : ele).join(\" \");\r\n    }\r\n\r\n    return (\r\n        <p className='mt-3 px-2'>{text}</p>\r\n    );\r\n};\r\n\r\nexport default Text;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,IAAIA,CAAA,EAAG;EACZ,MAAMC,MAAM,GAAG,aAAa;EAC5B,IAAIC,IAAI,GAAI,kJAAiJ;EAE7J,IAAID,MAAM,KAAK,aAAa,EAAE;IAC1BC,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,KAAKJ,MAAM,gBAAGF,OAAA;MAAAO,QAAA,EAAM;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO,GAAGL,GAAG,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EAC9G,CAAC,MAAM,IAAIV,MAAM,KAAK,QAAQ,EAAE;IAC5BC,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,KAAKJ,MAAM,GAAGI,GAAG,CAACO,iBAAiB,EAAE,GAAGP,GAAG,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EACjG;EAEA,oBACIZ,OAAA;IAAGc,SAAS,EAAC,WAAW;IAAAP,QAAA,EAAEJ;EAAI;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAK;AAE3C;AAACI,EAAA,GAbQd,IAAI;AAaZ;AAED,eAAeA,IAAI;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}